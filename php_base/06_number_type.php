<?php
/**
 *数据类型：
 *
 * Integer(整型)
 * Float(浮点型)
 * Boolean(布尔型)
 * String(字符串)
 * Array(数组)
 * Object(对象)
 * Null(空值)
 */



/**
 *整数：整数有四种书写形式(注意这里是书写形式,实际展示形式都是以十进制进行展示):
 * 10进制形式：$n1 = 123;
 * 8进制形式：$n2 = 0123;
 * 16进制形式：$n3 = 0x123;
 * 2进制形式：$n4 = 0b1010;
 *
 * 进制转换:直接通过系统函数来进行转换
 *
 * dec(Decimal system):10进制
 * bin(Binary system):2进制
 * oct(Octal number system):8进制
 * hex(Hexadecimal):16进制
 *
 * 10进制转2，8，16进制：
 * decbin(): 将10进制转换为2进制
 * decotc(): 将10进制转换为8进制
 * dechex(): 将10进制转换为16进制
 *
 * 2,8,16进制转换称10进制：
 * bindec():将2进制数字字符串转换为10进制(注意：这里必须是字符串)
 * octdec():将8进制数字字符串转换为10进制
 * hexdec():将2进制数字字符串转换为10进制
 *
 */

 // 整数表示
//  $n1 = 123;
//  $n2 = 0123;
//  $n3 = 0x123;
//  $n4 = 0b1010;

//  echo "<br/>n1=".$n1;
//  echo "<br/>n2=".$n2;
//  echo "<br/>n3=".$n3;
//  echo "<br/>n4=".$n4;



// 进制转换
// $n1 = 123;
// $n2 = decbin($n1);
// $n8 = decoct($n1);
// $n16 = dechex($n1);

// echo '<br/>123转换为2进制$n2=0b'.$n2;
// echo '<br/>123转换为8进制$n8=0'.$n8;
// echo '<br/>123转换为16进制$n16=0x'.$n16;



// $v2 = "0b1111011";
// $v8 = "0173";
// $v16 = "0x7b";

// $v1 = bindec($v2);
// echo '<br/>二进制转换为10进制$v1='.$v1;




/**
 *浮点数：相当于数学中的小数
 *
 * 浮点数有两种书写形式：
 * 1. 常规形式(带小数点)： $f1 = 1.1;
 * 2. 科学计数法(带e) : $f2 = 1.23e3表示1.23乘以10的3次方， 虽然最终结果是1230是个整数，但是这种表示方法代表它是浮点数
 *
 * 特别注意：不要使用浮点数进行相等判断。比如：0.1 + 0.2 = 0.3;
 * 因为在计算机中二进制无法精确地表达一些小数,这时候就与操作系统能够展示的二进制长度有关。操作系统位数越多，能够i傲视的二进制长度就越多，因此越精确。
 * 但是这种精确也只是相对精确。
 * 因此，如果我们需要对小鼠进行比较，必须指定精确到多少位
 */


 // 浮点数的比较问题：

//  $f1 = 0.1;
//  $f2 = 0.2;
//  $f3 = 0.3;

//  if($f1 + $f2 == $f3){
//    echo '相等';
//  }else{
//    echo '不相等';
//  }

//  // 比如精确到小数点后4位，那么就乘以10000，然后转换为整数去比较

//  if( round($f3 * 10000) == round( ($f1 + $f2) * 10000)){
//    echo '相等';
//  }else{
//   echo '不相等';
//  }


/**
 *字符串：使用单引号后者双引号包裹起来的连续字符：
 *
 *注意：
 *1. 字符串中的HTML标签字符会被解释称相对应的HTML
 *2. 双引号中的$后面的连续字符(注意：这里一定是连续字符)会被解释成一个变量，如果没有这个变量则会报错；
 *  而单引号中不会进行解释，会原样输出字符
 */

//  $v2 = 'hello';
//  echo "<br/>111$v2";   // hello
//  echo "<br/>222$v2的值是：$v2";   // 报错：这里会把$后面的连续字符v2的值当作一个变量，找不到这个变量就报错。
//  echo "<br/>333\$v2的值是11：$v2";   // 使用转义字符将$。
//  echo '<br/>444$v2';   // $v2
//  echo "<br/>555$v3";   // 报错



/**
 * 数组Array：由一系列有序的数组组成。
 *
 * 数组的表示：
 * 1. $arr1 = array('张三丰',18,'男');
 * 2. $ar2 = array('name' => '张三丰', 'age' => 18, 'gender' => '男');
 * 新版本中可以这样表示：
 * 3. $arr3 = ['张三丰',19,'男'];
 * 4. $arr4 = ['name' => '张三丰', 'age' => 18, 'gender' => '男'];
 *
 * 数组如果没有给定下标，则默认是0，1，2，3.
 * 数组如果指定下标，则是字符串下标.
 *
 *
 * 数组的赋值和取值：
 *
 * $arr1[1] ='张无忌';  数组赋值
 *
 * 打印输出数组：
 * print_r($arr1);
 *
 */

// $arr3 = ['name' => '张三丰', 'age' => 18, 'gender' => '男'];

// echo "姓名：$arr3['name']";
// echo "<br/>";
// print($arr3);

// print_r($arr3);

/**
 * 空类型：Null(null)不区分大小写
 *
 * $v2 = null; 此时具有变量$v2,但是它其中的数据是"空的"
 * isset($v2) = false
 *
 */



 /**
  * 类型判断：
  * gettype():获取一个变量的类型，返回的是具体的一个变量类型的名称(字符串小写形式)
  *
  * settype($v1,'string'):用于设置类型
  *
  *  var_dump():输出变量的"完整信息",包括变量类型，长度，内容等。
  *
  * 具体的类型判断：只是返回true和false而不是返回具体的的类型
  * is_int()/is_integer():判断是否为整数类型
  * is_float():判断是否为浮点类型
  * is_bool():判断是否为布尔类型
  * is_string():判断是否为数组类型
  * is_array():判断是否为字符串类型
  * is_numeric():判断是否为数字类型(包括整型，浮点型以及纯数字的字符串)
  * id_object():判断是否为对象
  *
  *
  * 特殊的判断：
  *
  * isset():判断一个变量是否存在，或者变量中是否有数据，有则返回true,否则返回false
  * empty():判断是否为"空"。如果为空返回true,否则返回false。这里的空是有具体数据类型，但是值为空。
  * 比如：integer中的0,string中的'',boolean中的false,array中的array()
  *
  *
  * 类型转换：
  * PHP是一门弱类型语言，也就是说PHP对数据类型的限定比较少。这就要求在使用类型时能够自动地实现类型转换。
  *
  * 1.自动转换:如果参与运算的数据不是需要的类型，则会自动转换为需要的类型.
  *   转换规则：
  *   (1)字符串转数字：如果字符串前面有数字，则保留数字，如果字符串前面没有数字，则转化为0
  *   例如：1  + '2.1b'  = 3.1;  1 + 'aa1' = 1
  *   (2)字符串转整数:  %运算会将两边的数据转化为整数(无论是字符串还是浮点型数据)
  *
  * 2.强制转换
  *   在数据前面加上(int)"2"将字符串转化为数字。
  */

  $name = '张三丰';
  $age = 11;
  $list = ['hello','world'];

  echo gettype($name);   // string
  echo '<br/>';
  echo gettype($age);    // integer
  echo '<br/>';
  echo gettype($list);   // array
  echo '<br/>';

  // settype($age,'string');
  // echo gettype($age);    // string  将integer类型的$age 转化为string类型的$age

  echo 'var_dump<br/>';
  echo var_dump($name);  // string(9)"张三丰"
  echo '<br/>';
  echo var_dump($age);   // int(11)
  echo '<br/>';
  echo var_dump($list);  // array(2) { [0]=> string(5) "hello" [1]=> string(5) "world" }

  echo '<br/>具体的类型判断<br/>';
  if(is_int($age)){
    echo '这是一个整数';
  };

  echo '<br/>isset<br/>';
  $num;
  var_dump(isset($name));
  var_dump(isset($sex));
  var_dump(isset($num));

?>
